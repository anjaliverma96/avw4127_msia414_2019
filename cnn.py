# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ESIQhU-xaAlTFXxiMoUIVgKZ_Qz9LQEW
"""

# CNN Model

# import necessary libraries
import logging

logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.DEBUG)

from keras.models import Sequential
from keras.layers import Dense, Embedding, Flatten, Dropout
from keras.layers.pooling import MaxPooling1D
from keras.layers.convolutional import Conv1D
from keras.regularizers import l2
from keras.callbacks import EarlyStopping
import gensim
from keras.preprocessing.sequence import pad_sequences
import numpy as np
import keras
import json, multiprocessing
import pandas as pd
import numpy as np
import gensim

# model hyper parameters
hyperparameters = {"EMBEDDING_DIM":100,
"SEQUENCE_LENGTH_PERCENTILE" : 90,
"n_layers" : 2,
"hidden_units" : 500,
"batch_size" :100,
"pretrained_embedding" : False,
# if we have pre-trained embeddings, specify if they are static or non-static embeddings
"TRAINABLE_EMBEDDINGS" : True,
"patience" : 2,
"dropout_rate": 0.3,
"n_filters" :100,
"window_size" : 8,
"dense_activation" : "relu",
"l2_penalty" : 0.0003,
"epochs" : 10,
"VALIDATION_SPLIT" : 0.1}

def token_to_index(token, dictionary):
    """
    Given a token and a gensim dictionary, return the token index
    if in the dictionary, None otherwise.
    Reserve index 0 for padding.
    """
    if token not in dictionary.token2id:
        return None
    return dictionary.token2id[token] + 1

def texts_to_indices(text, dictionary):
    """
    Given a list of tokens (text) and a gensim dictionary, return a list
    of token ids.
    """
    result = list(map(lambda x: token_to_index(x, dictionary), text))
    return list(filter(None, result))

# define function to train model that takes in training dataset, training labels, hyperparameters dictionary as input
def train(train_texts, train_labels, dictionary, hyperparameters, model_file=None,EMBEDDINGS_MODEL_FILE=None, ):
    """
    Train a word-level CNN text classifier.
    :param train_texts: tokenized and normalized texts, a list of token lists, [['sentence', 'blah', 'blah'], ['sentence', '2'], .....]
    :param train_labels: the label for each train text
    :param dictionary: A gensim dictionary object for the training text tokens
    :param model_file: An optional output location for the ML model file
    :param EMBEDDINGS_MODEL_FILE: An optinal location for pre-trained word embeddings file location
    :return: the produced keras model, the validation accuracy, and the size of the training examples
    """
    assert len(train_texts)==len(train_labels)
    # compute the max sequence length
    lengths=list(map(lambda x: len(x), train_texts))
    a = np.array(lengths)
    MAX_SEQUENCE_LENGTH = int(np.percentile(a, hyperparameters["SEQUENCE_LENGTH_PERCENTILE"]))
    # convert all texts to dictionary indices
    train_texts_indices = list(map(lambda x: texts_to_indices(x, dictionary), train_texts))
    # pad or truncate the texts
    x_data = pad_sequences(train_texts_indices, maxlen=int(MAX_SEQUENCE_LENGTH))
    # convert the train labels to one-hot encoded vectors
    train_labels = keras.utils.to_categorical(train_labels)
    y_data = train_labels

    model = Sequential()

    # create embeddings matrix from word2vec pre-trained embeddings, if provided
    if hyperparameters["pretrained_embedding"]:
        embeddings_index = gensim.models.KeyedVectors.load_word2vec_format(EMBEDDINGS_MODEL_FILE, binary=True)
        embedding_matrix = np.zeros((len(dictionary) + 1, hyperparameters["EMBEDDING_DIM"]))
        for word, i in dictionary.token2id.items():
            embedding_vector = embeddings_index[word] if word in embeddings_index else None
            if embedding_vector is not None:
                # words not found in embedding index will be all-zeros.
                embedding_matrix[i] = embedding_vector
        model.add(Embedding(len(dictionary) + 1,
                            hyperparameters["EMBEDDING_DIM"],
                            weights=[embedding_matrix],
                            input_length=MAX_SEQUENCE_LENGTH,
                            trainable=hyperparameters["TRAINABLE_EMBEDDINGS"]))
    else:
        model.add(Embedding(len(dictionary) + 1,
                            hyperparameters["EMBEDDING_DIM"],
                            input_length=MAX_SEQUENCE_LENGTH))
    # add drop out for the input layer, why do you think this might help?
    model.add(Dropout(hyperparameters["dropout_rate"]))
    # add a 1 dimensional conv layer
    # a rectified linear activation unit, returns input if input > 0 else 0
    model.add(Conv1D(filters=hyperparameters["n_filters"],
                     kernel_size=hyperparameters["window_size"],
                     activation='relu'))
    # add a max pooling layer
    model.add(MaxPooling1D(MAX_SEQUENCE_LENGTH - hyperparameters["window_size"] + 1))
    model.add(Flatten())

    # add 0 or more fully connected layers with drop out
    for _ in range(hyperparameters["n_layers"]):
        model.add(Dropout(hyperparameters["dropout_rate"]))
        model.add(Dense(hyperparameters["hidden_units"],
                        activation=hyperparameters["dense_activation"],
                        kernel_regularizer=l2(hyperparameters["l2_penalty"]),
                        bias_regularizer=l2(hyperparameters["l2_penalty"]),
                        kernel_initializer='glorot_uniform',
                        bias_initializer='zeros'))

    # add the last fully connected layer with softmax activation
    model.add(Dropout(hyperparameters["dropout_rate"]))
    model.add(Dense(len(train_labels[0]),
                    activation='softmax',
                    kernel_regularizer=l2(hyperparameters["l2_penalty"]),
                    bias_regularizer=l2(hyperparameters["l2_penalty"]),
                    kernel_initializer='glorot_uniform',
                    bias_initializer='zeros'))

    # compile the model, provide an optimizer
    model.compile(loss='categorical_crossentropy',
                  optimizer='rmsprop',
                  metrics=['accuracy'])

    # print a summary
    print(model.summary())


    # train the model with early stopping
    early_stopping = EarlyStopping(patience=hyperparameters["patience"])
    Y = np.array(y_data)

    fit = model.fit(x_data,
                    Y,
                    batch_size=hyperparameters["batch_size"],
                    epochs=hyperparameters["epochs"],
                    validation_split=hyperparameters["VALIDATION_SPLIT"],
                    verbose=1,
                    callbacks=[early_stopping])

    print(fit.history.keys())
    val_accuracy = fit.history['acc'][-1]
    print(val_accuracy)
    # save the model

    if model_file:
        model.save(model_file)
    return model, val_accuracy, len(train_labels)

def tokenize(text):
    # for each token in the text (the result of text.split(),
    # apply a function that strips punctuation and converts to lower case.
    tokens = map(lambda x: x.strip(',.&').lower(), text.split())
    # get rid of empty tokens
    tokens = list(filter(None, tokens))
    return tokens

# from google.colab import drive
# drive.mount('/content/drive', force_remount=True)

# read the first 500,000 yelp reviews
df = pd.read_csv("yelp_reviews.csv", encoding='utf-8', engine='python', error_bad_lines=False)

# Create a list of text reviews from the text column in the reviews dataframe
text = df['text'].values.tolist()
# Tokenize the reviews
texts = list(map(tokenize, text))
# Create a list of labels from the label column in the reviews dataframe
labels = df['stars'].values.tolist()

# Create a vocabulary from the tokenized texts
mydict = gensim.corpora.Dictionary(texts)
mydict.save('yelp.dict')

#### MODEL 1 : Bag of word representation - Word level
#Epochs = 10
#Batch_Size = 100
#Dropout_rate = 0.3
#Dense_activation function = relu

# train the model 
train(texts, labels, mydict, hyperparameters, model_file='yelp_cnn.model')

#### MODEL 2 : Bag of word representation - Word level : Change NUMBER OF EPOCHS
#Epochs = 20
#Batch_Size = 100
#Dropout_rate = 0.3
#Dense_activation function = relu

hyperparameters["epochs"] = 20
train(texts, labels, mydict, hyperparameters, model_file='yelp_cnn_epochs.model')

#### MODEL 3 : Bag of word representation - Word level : Keep number of epochs same as in model 2
#### Change BATCH SIZE
#Epochs = 20
#Batch_Size = 200
#Dropout_rate = 0.3
#Dense_activation function = relu

hyperparameters["batch_size"] = 200
train(texts, labels, mydict, hyperparameters, model_file='yelp_cnn_batch.model')

#### MODEL 4 : Bag of word representation - Word level : Keep number of epochs and batch size same as in model 3
#### Change DENSE ACTIVATION FUNCTION
#Epochs = 20
#Batch_Size = 200
#Dropout_rate = 0.3
#Dense_activation function = softplus

hyperparameters["dense_activation"] = "softplus"
train(texts, labels, mydict, hyperparameters, model_file='yelp_cnn_activation.model')

#### MODEL 5 : Bag of word representation - Word level : Keep number of epochs and batch size same as model 4
#### Change dense activation function back to relu, Change DROPOUT RATE
#Epochs = 20
#Batch_Size = 200
#Dropout_rate = 0.4
#Dense_activation function = relu

hyperparameters["dense_activation"] = "relu"
hyperparameters["dropout_rate"] = 0.4
train(texts, labels, mydict, hyperparameters, model_file='yelp_cnn_dropout.model')

# let's create a bag-of-words using both 1-grams and 2-grams
def uni_and_bigrams(text):
    # our unigrams are our tokens
    unigrams=tokenize(text)
    # the bigrams just contatenate 2 adjacent tokens with _ in between
    bigrams=list(map(lambda x: '_'.join(x), zip(unigrams, unigrams[1:])))
    # returning a list containing all 1 and 2-grams
    return unigrams+bigrams

tokenized_texts=list(map(uni_and_bigrams, text))

# let's see what the new dictionary looks like
my_bigram_dict = gensim.corpora.Dictionary(tokenized_texts)

#### MODEL 6 : Bag of word representation - NGRAM level : Keep number of epochs, batch size and dense_activation same as model 5
#### Change dropout back to 0.3
#Epochs = 20
#Batch_Size = 200
#Dropout_rate = 0.3
#Dense_activation function = relu

hyperparameters["batch_size"] = 200
hyperparameters["epochs"] = 20
hyperparameters["dense_activation"] = "relu"
hyperparameters["dropout_rate"] = 0.3

train(tokenized_texts, labels, my_bigram_dict, hyperparameters, model_file='yelp_cnn_bigram.model')

